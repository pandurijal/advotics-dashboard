{"version":3,"sources":["Components/Navbar/index.js","Components/Calendar/index.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","src","process","alt","dateRange","today","moment","yesterday","subtract","last7Days","last30Days","thisMonth","startOf","optRange","text","range","Calendar","useState","selectedDate","setSelectedDate","console","log","map","item","key","onClick","selectedValue","disabledDate","current","isAfter","onSelect","data","month","pv","App","width","height","margin","top","right","left","bottom","strokeDasharray","dataKey","fill","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oRAEMA,G,cAAS,WACb,OACE,yBAAKC,UAAU,UACb,yBACEA,UAAU,OACVC,IAAG,UAAKC,sBAAL,aACHC,IAAI,Y,0CCJNC,EAAY,CAChBC,MAAO,CAACC,MAAUA,OAClBC,UAAW,CAACD,MAASE,SAAS,EAAG,KAAMF,MAASE,SAAS,EAAG,MAC5DC,UAAW,CAACH,MAASE,SAAS,EAAG,KAAMF,OACvCI,WAAY,CAACJ,MAASE,SAAS,GAAI,KAAMF,OACzCK,UAAW,CAACL,MAASM,QAAQ,SAAUN,QAGnCO,EAAW,CACf,CAAEC,KAAM,QAASC,MAAOX,EAAUC,OAClC,CACES,KAAM,YACNC,MAAOX,EAAUG,WAEnB,CACEO,KAAM,cACNC,MAAOX,EAAUK,WAEnB,CAAEK,KAAM,eAAgBC,MAAOX,EAAUM,YACzC,CAAEI,KAAM,aAAcC,MAAOX,EAAUO,WACvC,CACEG,KAAM,SACNC,MAAO,EACJX,EAAUC,QACRD,EAAUG,YACVH,EAAUK,YACVL,EAAUM,aACVN,EAAUO,aAKbK,EAAW,WAAO,IAAD,EACmBC,mBAASb,EAAUC,OADtC,mBACda,EADc,KACAC,EADA,KAIrB,OAFAC,QAAQC,IAAI,CAAEH,iBAGZ,yBAAKlB,UAAU,YACb,yBAAKA,UAAU,oBACZa,EAASS,KAAI,SAAAC,GAAI,OAChB,yBACEC,IAAKD,EAAKT,KACVW,QAAS,kBAAMN,EAAgBI,EAAKR,QACpCf,UAAS,gCACPkB,IAAiBK,EAAKR,MAAQ,SAAW,KAG3C,2BAAIQ,EAAKT,WAIf,kBAAC,IAAD,CACEY,cAAeR,EACfS,aAAc,SAAAC,GACZ,OAAOA,EAAQC,QAAQzB,EAAUC,QAEnCyB,SAAU,SAAAxB,GACR,OAAOa,EAAgBb,Q,QC9C3ByB,G,cAAO,CACX,CACEC,MAAO,MACPC,GAAI,MAEN,CACED,MAAO,MACPC,GAAI,MAEN,CACED,MAAO,MACPC,GAAI,MAEN,CACED,MAAO,MACPC,GAAI,MAEN,CACED,MAAO,MACPC,GAAI,MAEN,CACED,MAAO,MACPC,GAAI,MAEN,CACED,MAAO,MACPC,GAAI,MAEN,CACED,MAAO,MACPC,GAAI,MAEN,CACED,MAAO,MACPC,GAAI,MAEN,CACED,MAAO,MACPC,GAAI,MAEN,CACED,MAAO,MACPC,GAAI,MAEN,CACED,MAAO,MACPC,GAAI,QA+BOC,MA3Bf,WACE,OACE,yBAAKlC,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,IAAD,CACEmC,MAAO,IACPC,OAAQ,IACRL,KAAMA,EACNM,OAAQ,CACNC,IAAK,EACLC,MAAO,GACPC,KAAM,GACNC,OAAQ,IAGV,kBAAC,IAAD,CAAeC,gBAAgB,QAC/B,kBAAC,IAAD,CAAOC,QAAQ,UACf,kBAAC,IAAD,MACA,kBAAC,IAAD,MACA,kBAAC,IAAD,MACA,kBAAC,IAAD,CAAKA,QAAQ,KAAKC,KAAK,iCC3EXC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.ca3424d4.chunk.js","sourcesContent":["import React from 'react';\n\nconst Navbar = () => {\n  return (\n    <nav className=\"navbar\">\n      <img\n        className=\"logo\"\n        src={`${process.env.PUBLIC_URL}/logo.jpg`}\n        alt=\"logo\"\n      />\n    </nav>\n  );\n};\n\nexport { Navbar };\n","import React, { useState, useEffect, useCallback } from 'react';\nimport moment from 'moment';\nimport ReactCalendar from 'rc-calendar/lib/RangeCalendar';\n\nconst dateRange = {\n  today: [moment(), moment()],\n  yesterday: [moment().subtract(1, 'd'), moment().subtract(1, 'd')],\n  last7Days: [moment().subtract(7, 'd'), moment()],\n  last30Days: [moment().subtract(30, 'd'), moment()],\n  thisMonth: [moment().startOf('month'), moment()]\n};\n\nconst optRange = [\n  { text: 'Today', range: dateRange.today },\n  {\n    text: 'Yesterday',\n    range: dateRange.yesterday\n  },\n  {\n    text: 'Last 7 days',\n    range: dateRange.last7Days\n  },\n  { text: 'Last 30 days', range: dateRange.last30Days },\n  { text: 'This Month', range: dateRange.thisMonth },\n  {\n    text: 'Custom',\n    range: [\n      !dateRange.today &&\n        !dateRange.yesterday &&\n        !dateRange.last7Days &&\n        !dateRange.last30Days &&\n        !dateRange.thisMonth\n    ]\n  }\n];\n\nconst Calendar = () => {\n  const [selectedDate, setSelectedDate] = useState(dateRange.today);\n  console.log({ selectedDate });\n\n  return (\n    <div className=\"calendar\">\n      <div className=\"calendar-sidebar\">\n        {optRange.map(item => (\n          <div\n            key={item.text}\n            onClick={() => setSelectedDate(item.range)}\n            className={`calendar-sidebar-item ${\n              selectedDate === item.range ? 'active' : ''\n            }`}\n          >\n            <p>{item.text}</p>\n          </div>\n        ))}\n      </div>\n      <ReactCalendar\n        selectedValue={selectedDate}\n        disabledDate={current => {\n          return current.isAfter(dateRange.today);\n        }}\n        onSelect={moment => {\n          return setSelectedDate(moment);\n        }}\n      />\n    </div>\n  );\n};\n\nexport { Calendar };\n","import React from 'react';\nimport { Navbar, Calendar } from './Components';\nimport {\n  BarChart,\n  Bar,\n  Cell,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend\n} from 'recharts';\nimport './App.css';\nimport 'rc-calendar/assets/index.css';\n\nconst data = [\n  {\n    month: 'Jan',\n    pv: 2400\n  },\n  {\n    month: 'Feb',\n    pv: 1398\n  },\n  {\n    month: 'Mar',\n    pv: 9800\n  },\n  {\n    month: 'Apr',\n    pv: 3908\n  },\n  {\n    month: 'May',\n    pv: 4800\n  },\n  {\n    month: 'Jun',\n    pv: 3800\n  },\n  {\n    month: 'Jul',\n    pv: 4300\n  },\n  {\n    month: 'Aug',\n    pv: 2400\n  },\n  {\n    month: 'Sep',\n    pv: 1398\n  },\n  {\n    month: 'Okt',\n    pv: 9800\n  },\n  {\n    month: 'Nov',\n    pv: 3908\n  },\n  {\n    month: 'Dec',\n    pv: 4800\n  }\n];\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Navbar />\n      <Calendar />\n      <BarChart\n        width={800}\n        height={300}\n        data={data}\n        margin={{\n          top: 5,\n          right: 30,\n          left: 20,\n          bottom: 5\n        }}\n      >\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis dataKey=\"month\" />\n        <YAxis />\n        <Tooltip />\n        <Legend />\n        <Bar dataKey=\"pv\" fill=\"rgb(var(--brand-primary))\" />\n      </BarChart>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}